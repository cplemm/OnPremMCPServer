@page
@model IndexModel
@{
    ViewData["Title"] = "MCP Machine Chat";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .chat-container {
            height: 70vh;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow-y: auto;
            padding: 15px;
            background-color: #f8f9fa;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
            max-width: 80%;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            margin-left: auto;
            text-align: right;
        }
        .assistant-message {
            background-color: #e9ecef;
            color: #333;
            margin-right: auto;
        }
        .input-section {
            margin-top: 15px;
        }
        .tools-section {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .loading {
            display: none;
            color: #6c757d;
            font-style: italic;
        }
        #sendButton:disabled {
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">ðŸ¤– MCP Machine Chat</h1>
                <p class="text-muted">Chat with the MCP Machine Agent to control and monitor machines.</p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Chat</h5>
                    </div>
                    <div class="card-body">
                        <div id="chatMessages" class="chat-container">
                            <div class="message assistant-message">
                                <strong>Assistant:</strong> Hello! I can help you control and monitor machines. You can ask me to start, stop, or check the status of machines. What would you like to do?
                            </div>
                        </div>
                        <div class="input-section">
                            <div class="input-group">
                                <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." onkeypress="handleKeyPress(event)">
                                <button id="sendButton" class="btn btn-primary" onclick="sendMessage()">
                                    <span id="sendText">Send</span>
                                    <span id="sendSpinner" class="loading spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                        <div id="loadingIndicator" class="loading mt-2">
                            <div class="spinner-border spinner-border-sm" role="status"></div>
                            Assistant is thinking...
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Available Tools</h5>
                    </div>
                    <div class="card-body">
                        <div id="toolsList">
                            <div class="loading">Loading tools...</div>
                        </div>
                        <div class="mt-2">
                            <button class="btn btn-outline-secondary btn-sm me-2" onclick="loadTools()">Refresh Tools</button>
                            <button class="btn btn-outline-danger btn-sm" onclick="clearTools()">Clear Tools</button>
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">Examples</h5>
                    </div>
                    <div class="card-body">
                        <p class="small text-muted mb-2">Try these example commands:</p>
                        <div class="d-grid gap-1">
                            <button class="btn btn-outline-info btn-sm" onclick="setMessage('Get status of machine foo')">Get machine status</button>
                            <button class="btn btn-outline-success btn-sm" onclick="setMessage('Start machine foo')">Start machine</button>
                            <button class="btn btn-outline-warning btn-sm" onclick="setMessage('Stop machine foo')">Stop machine</button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="setMessage('Echo hello world')">Echo message</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const chatHistory = [];

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Page loaded");
            loadTools();
            document.getElementById('messageInput').focus();
        });

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            
            if (!message) return;

            // Add to chat history and show user message immediately
            chatHistory.push({ content: message, isUser: true, timestamp: new Date() });
            showMessage(message, true);

            // Clear input and set loading state
            messageInput.value = "";
            setLoading(true);

            try {
                const response = await fetch('/api/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        chatHistory: chatHistory
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                // Show assistant response
                if (data.response) {
                    showMessage(data.response, false);
                } else if (data.error) {
                    showMessage(data.error, false);
                }
            } catch (error) {
                console.error("Error sending message:", error);
                showMessage("Error sending message. Please try again.", false);
            } finally {
                setLoading(false);
            }
        }

        function showMessage(message, isUser) {
            const chatMessages = document.getElementById("chatMessages");
            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
            
            const senderLabel = isUser ? "You" : "Assistant";
            messageDiv.innerHTML = `<strong>${senderLabel}:</strong> ${escapeHtml(message)}`;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // Add to chat history if it's from assistant
            if (!isUser) {
                chatHistory.push({ content: message, isUser: false, timestamp: new Date() });
            }
        }

        function setLoading(isLoading) {
            const sendButton = document.getElementById("sendButton");
            const sendText = document.getElementById("sendText");
            const sendSpinner = document.getElementById("sendSpinner");
            const loadingIndicator = document.getElementById("loadingIndicator");
            
            sendButton.disabled = isLoading;
            sendText.style.display = isLoading ? "none" : "inline";
            sendSpinner.style.display = isLoading ? "inline-block" : "none";
            loadingIndicator.style.display = isLoading ? "block" : "none";
        }

        async function loadTools() {
            console.log("loadTools() called");
            try {
                const response = await fetch('/api/chat/tools');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                displayTools(data.tools || []);
            } catch (error) {
                console.error("Error loading tools:", error);
                displayTools(["Error loading tools: " + error.message]);
            }
        }

        function clearTools() {
            console.log("clearTools() called");
            const toolsList = document.getElementById("toolsList");
            toolsList.innerHTML = '<div class="text-muted small">Tools cleared</div>';
        }

        function displayTools(tools) {
            console.log("displayTools() called with", tools);
            const toolsList = document.getElementById("toolsList");
            if (tools.length === 0) {
                toolsList.innerHTML = '<div class="text-muted small">No tools available</div>';
                return;
            }

            const toolsHtml = tools.map(tool => 
                `<div class="small mb-1 p-2 border rounded bg-light">
                    <code class="small">${escapeHtml(tool)}</code>
                 </div>`
            ).join('');
            
            toolsList.innerHTML = toolsHtml;
        }

        function setMessage(message) {
            document.getElementById("messageInput").value = message;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
